0000              1   ; ISR_example.asm: a) Increments/decrements a BCD variable every half second using
0000              2   ; an ISR for timer 2; b) Generates a 2kHz square wave at pin P3.7 using
0000              3   ; an ISR for timer 0; and c) in the 'main' loop it displays the variable
0000              4   ; incremented/decremented using the ISR for timer 2 on the LCD.  Also resets it to 
0000              5   ; zero if the 'BOOT' pushbutton connected to P4.5 is pressed.
                  7   $LIST
0000              9   
0000             10   ; There is a couple of typos in MODLP51 in the definition of the timer 0/1 reload
0000             11   ; special function registers (SFRs), so:
0000             12   
0000             13   TIMER0_RELOAD_L DATA 0xf2
0000             14   TIMER1_RELOAD_L DATA 0xf3
0000             15   TIMER0_RELOAD_H DATA 0xf4
0000             16   TIMER1_RELOAD_H DATA 0xf5
0000             17   
0000             18   CLK           EQU 22118400 ; Microcontroller system crystal frequency in Hz
0000             19   TIMER0_RATE   EQU 1000    ; 2048Hz squarewave (peak amplitude of CEM-1203 speaker)
0000             20   TIMER0_RELOAD EQU ((65536-(CLK/TIMER0_RATE)))
0000             21   TIMER2_RATE   EQU 1000     ; 1000Hz, for a timer tick of 1ms
0000             22   TIMER2_RELOAD EQU ((65536-(CLK/TIMER2_RATE)))
0000             23   
0000             24   BAUD equ 115200
0000             25   BRG_VAL equ (0x100-(CLK/(16*BAUD)))
0000             26   
0000             27   
0000             28   ;BUTTONS HERE
0000             29   BOOT_BUTTON   equ P4.5
0000             30   ADD_ONE       equ p0.1
0000             31   SOUND_OUT          equ p4.4
0000             32   NEXT               equ p2.4
0000             33   
0000             34   
0000             35   
0000             36   
0000             37   ; Reset vector
0000             38   org 0x0000
0000 0205F6      39       ljmp main
0003             40   ; External interrupt 0 vector (not used in this code)
0003             41   org 0x0003
0003 32          42            reti
0004             43   ; Timer/Counter 0 overflow interrupt vector
000B             44   org 0x000B
000B 020494      45            ljmp Timer0_ISR
000E             46   ; External interrupt 1 vector (not used in this code)
0013             47   org 0x0013
0013 32          48            reti
0014             49   ; Timer/Counter 1 overflow interrupt vector (not used in this code)
001B             50   org 0x001B
001B 32          51            reti
001C             52   ; Serial port receive/transmit interrupt vector (not used in this code)
0023             53   org 0x0023 
0023 32          54            reti
0024             55   ; Timer/Counter 2 overflow interrupt vector
002B             56   org 0x002B
002B 0204BC      57            ljmp Timer2_ISR
002E             58            
002E             59            
002E             60   ;VARIABLES HERE  
002E             61   ; In the 8051 we can define direct access variables starting at location 0x30 up to location 0x7F
0030             62   dseg at 0x30
0030             63   Count1ms:     ds 2 ; Used to determine when half second has passed
0032             64   BCD_counter:  ds 1 ; The BCD counter incrememted in the ISR and displayed in the main loop
0033             65   second:            ds 1
0034             66   soaktemp:          ds 2
0036             67   soaktime:          ds 2
0038             68   reflowtemp:        ds 2
003A             69   reflowtime:        ds 2
003C             70   x: ds 4
0040             71   y: ds 4
0044             72   bcd: ds 5
0049             73   result: ds 4
004D             74   hun: ds 1
004E             75   hun1: ds 1
004F             76   hun2: ds 1
0050             77   hun3: ds 1
0051             78   hunsec: ds 1
0052             79   switch: ds 1
0053             80   currenttemp: ds 1
0054             81   pwm:               ds 2
0056             82   state: ds 1
0057             83   statealarm: ds 1
0058             84   
0058             85   
0058             86   
0058             87   ;FLAGS
0058             88   ; In the 8051 we have variables that are 1-bit in size.  We can use the setb, clr, jb, and jnb
0058             89   ; instructions with these variables.  This is how you define a 1-bit variable:
0000             90   bseg
0000             91   half_seconds_flag: dbit 1 ; Set to one in the ISR every time 500 ms had passed
0001             92   no_alarm: dbit 0
0001             93   mf: dbit 1
0002             94   
0002             95   
0002             96   
002E             97   cseg
002E             98   ; These 'equ' must match the wiring between the microcontroller and the LCD!
002E             99   LCD_RS equ P1.1
002E            100   LCD_RW equ P1.2
002E            101   LCD_E  equ P1.3
002E            102   LCD_D4 equ P3.2
002E            103   LCD_D5 equ P3.3
002E            104   LCD_D6 equ P3.4
002E            105   LCD_D7 equ P3.5
002E            106   
002E            107   
002E            108   CE_ADC EQU P2.0
002E            109   MY_MOSI EQU P2.1
002E            110   MY_MISO EQU P2.2
002E            111   MY_SCLK EQU P2.3
002E            112   
002E            113   
                546   $LIST
036D             88   $LIST
                117   $LIST
036D            119   
036D            120   ;add menu display messages here!
036D 534F414B   121   stemp:                                   db 'SOAK TEMP:  xxxC',0
     2054454D
     503A2020
     78787843
     00
037E 534F414B   122   stime:                                   db 'SOAK TIME:  xxxs',0
     2054494D
     453A2020
     78787873
     00
038F 5245464C   123   rtemp:                                   db 'REFLOW TEMP xxxC',0
     4F572054
     454D5020
     78787843
     00
03A0 5245464C   124   rtime:                                   db 'REFLOW TIME xxxs',0
     4F572054
     494D4520
     78787873
     00
03B1 20203E20   125   selectyes:                           db '  > yes <  no   ',0
     79657320
     3C20206E
     6F202020
     00
03C2 20202020   126   selectno:                            db '    yes  > no < ',0
     79657320
     203E206E
     6F203C20
     00
03D3 20205341   127   save:                                    db '  SAVE CHANGES? ',0
     56452043
     48414E47
     45533F20
     00
03E4 20202020   128   clear:                                   db '                ',0
     20202020
     20202020
     20202020
     00
03F5 20202078   129   otemp:                                   db '   xxxC  xxxs   ',0
     78784320
     20787878
     73202020
     00
0406 20205241   130   state1dis:                               db '  RAMP TO SOAK  ',0
     4D502054
     4F20534F
     414B2020
     00
0417 20202020   131   state2dis:                               db '      SOAK      ',0
     2020534F
     414B2020
     20202020
     00
0428 2052414D   132   state3dis:                               db ' RAMP TO REFLOW ',0 
     5020544F
     20524546
     4C4F5720
     00
0439 20202020   133   state4dis:                               db '     REFLOW     ',0
     20524546
     4C4F5720
     20202020
     00
044A 20202020   134   state5dis:                               db '      COOL      ',0
     2020434F
     4F4C2020
     20202020
     00
045B 20594F55   135   coolenough:                              db ' YOUVE GOT ONE  ',0
     56452047
     4F54204F
     4E452020
     00
046C 20202020   136   coolenough1:                     db '    COOL BOY    ',0
     434F4F4C
     20424F59
     20202020
     00
047D            137   
047D            138   
047D            139   ;SET UP TIMERS!!!!!!!!!!!!!! (LAB 2)
047D            140   ;---------------------------------;
047D            141   ; Routine to initialize the ISR   ;
047D            142   ; for timer 0                     ;
047D            143   ;---------------------------------;
047D            144   Timer0_Init:
047D E589       145            mov a, TMOD
047F 54F0       146            anl a, #0xf0 ; Clear the bits for timer 0
0481 4401       147            orl a, #0x01 ; Configure timer 0 as 16-timer
0483 F589       148            mov TMOD, a
0485 758CA9     149            mov TH0, #high(TIMER0_RELOAD)
0488 758A9A     150            mov TL0, #low(TIMER0_RELOAD)
048B 75F4A9     151            mov TIMER0_RELOAD_H, #high(TIMER0_RELOAD)
048E 75F29A     152            mov TIMER0_RELOAD_L, #low(TIMER0_RELOAD)
0491            153            ; Enable the timer and interrupts
0491 D2A9       154       setb ET0  ; Enable timer 0 interrupt
0493            155       ;setb TR0  ; Start timer 
0493 22         156            ret
0494            157   
0494            158   ;---------------------------------;
0494            159   ; ISR for timer 0.  Set to execute;
0494            160   ; every 1/4096Hz to generate a    ;
0494            161   ; 2048 Hz square wave at pin P3.7 ;
0494            162   ;---------------------------------;
0494            163   Timer0_ISR:
0494 C28D       164            clr TF0  ; According to the data sheet this is done for us already.
0496 300109     165            jnb no_alarm, don
0499 B2C4       166            cpl SOUND_OUT ; Connect speaker to P3.7!
049B 12051E     167            lcall delay
049E C2C4       168            clr SOUND_OUT
04A0 C201       169   clr no_alarm
04A2            170            don:
04A2 32         171            reti
04A3            172   
04A3            173   ;---------------------------------;
04A3            174   ; Routine to initialize the ISR   ;
04A3            175   ; for timer 2                     ;
04A3            176   ;---------------------------------;
04A3            177   Timer2_Init:
04A3 75C800     178            mov T2CON, #0 ; Stop timer/counter.  Autoreload mode.
04A6 75CDA9     179            mov TH2, #high(TIMER2_RELOAD)
04A9 75CC9A     180            mov TL2, #low(TIMER2_RELOAD)
04AC 75CBA9     181            mov RCAP2H, #high(TIMER2_RELOAD)
04AF 75CA9A     182            mov RCAP2L, #low(TIMER2_RELOAD)
04B2 E4         183            clr a
04B3 F530       184            mov Count1ms+0, a
04B5 F531       185            mov Count1ms+1, a
04B7 D2AD       186       setb ET2  ; Enable timer 2 interrupt
04B9 D2CA       187       setb TR2  ; Enable timer 2
04BB 22         188            ret
04BC            189   
04BC            190   ;---------------------------------;
04BC            191   ; ISR for timer 2                 ;
04BC            192   ;---------------------------------;
04BC            193   Timer2_ISR:
04BC C2CF       194            clr TF2  ; Timer 2 doesn't clear TF2 automatically. Do it in ISR
04BE B2B6       195            cpl P3.6 ; To check the interrupt rate with oscilloscope. It must be precisely a 1 ms pulse.
04C0 C0E0       196            push acc
04C2 C0D0       197            push psw
04C4 0530       198            inc Count1ms+0    ; Increment the low 8-bits first
04C6 E530       199            mov a, Count1ms+0 ; If the low 8-bits overflow, then increment high 8-bits
04C8 7002       200            jnz Inc_Done
04CA 0531       201            inc Count1ms+1
04CC            202            
04CC            203   Inc_Done:
04CC            204            ; Check if half second has passed
04CC C3         205            clr c
04CD            206            
04CD E530       207            mov a, count1ms+0
04CF 9554       208            subb a, pwm+0
04D1 E531       209            mov a, count1ms+1
04D3 9555       210            subb a, pwm+1
04D5 9283       211            mov P0.3, c
04D7            212            
04D7            213            
04D7 E530       214            mov a, Count1ms+0
04D9 B4E81F     215            cjne a, #low(1000), Timer2_ISR_done ; Warning: this instruction changes the carry flag!
04DC E531       216            mov a, Count1ms+1
04DE B4031A     217            cjne a, #high(1000), Timer2_ISR_done
04E1            218            ; 500 milliseconds have passed.  Set a flag so the main program knows
04E1 D200       219            setb half_seconds_flag ; Let the main program know half second had passed
04E3 E533       220            mov a, second
04E5 B49907     220            cjne a, #0x99, done8d
04E8 E551       220            mov a, hunsec
04EA 2401       220            add a, #0x1
04EC D4         220            da a
04ED F551       220            mov hunsec, a
04EF            220            done8d:
04EF E533       220            mov a, second
04F1 2401       220            add a, #1
04F3 D4         220            da a
04F4 F533       220            mov second, a
04F6            221            ; Reset to zero the milli-seconds counter, it is a 16-bit variable
04F6 E4         222            clr a
04F7 F530       223            mov Count1ms+0, a
04F9 F531       224            mov Count1ms+1, a       
04FB            225            
04FB            226   Timer2_ISR_done:
04FB D0D0       227            pop psw
04FD D0E0       228            pop acc
04FF 32         229            reti
0500            230            
0500            231   ;;GET TEMPERATURE DATA (LAB 3)                                                   
0500            232   INIT_SPI:
0500 D2A2       233    setb MY_MISO ; Make MISO an input pin
0502 C2A3       234    clr MY_SCLK ; For mode (0,0) SCLK is zero
0504 22         235    ret
0505            236   
0505            237   DO_SPI_G:
0505 C0E0       238    push acc
0507 7900       239    mov R1, #0 ; Received byte stored in R1
0509 7A08       240    mov R2, #8 ; Loop counter (8-bits)
050B            241    
050B            242   DO_SPI_G_LOOP:
050B E8         243    mov a, R0 ; Byte to write is in R0
050C 33         244    rlc a ; Carry flag has bit to write
050D F8         245    mov R0, a
050E 92A1       246    mov MY_MOSI, c
0510 D2A3       247    setb MY_SCLK ; Transmit
0512 A2A2       248    mov c, MY_MISO ; Read received bit
0514 E9         249    mov a, R1 ; Save received bit in R1
0515 33         250    rlc a
0516 F9         251    mov R1, a
0517 C2A3       252    clr MY_SCLK
0519 DAF0       253    djnz R2, DO_SPI_G_LOOP
051B D0E0       254    pop acc
051D 22         255    ret
051E            256    
051E            257    
051E            258   delay:
051E C002       259            push AR2
0520 7ABE       259            mov R2, #190
0522 120039     259            lcall ?Wait_Milli_Seconds
0525 D002       259            pop AR2 
0527            260   InitSerialPort:
0527            261       ; Since the reset button bounces, we need to wait a bit before
0527            262       ; sending messages, otherwise we risk displaying gibberish!
0527 79DE       263       mov R1, #222
0529 78A6       264       mov R0, #166
052B D8FE       265       djnz R0, $   ; 3 cycles->3*45.21123ns*166=22.51519us
052D D9FA       266       djnz R1, $-4 ; 22.51519us*222=4.998ms
052F            267       ; Now we can proceed with the configuration
052F 438780     268            orl     PCON,#0x80
0532 759852     269            mov     SCON,#0x52
0535 759B00     270            mov     BDRCON,#0x00
0538 759AF4     271            mov     BRL,#BRG_VAL
053B 759B1E     272            mov     BDRCON,#0x1E ; BDRCON=BRR|TBCK|RBCK|SPD;
053E 22         273       ret
053F            274   
053F            275   ; Send a character using the serial port
053F            276   putchar:
053F 3099FD     277       jnb TI, putchar
0542 C299       278       clr TI
0544 F599       279       mov SBUF, a
0546 22         280       ret
0547            281   
0547            282   ; Send a constant-zero-terminated string using the serial port
0547            283   SendString:
0547 E4         284       clr A
0548 93         285       movc A, @A+DPTR
0549 6006       286       jz SendStringDone
054B 12053F     287       lcall putchar
054E A3         288       inc DPTR
054F 80F6       289       sjmp SendString
0551            290   SendStringDone:
0551 22         291       ret
0552            292       
0552            293   Do_Something_With_Result:
0552            294   
0552            295            ;CONVERT TO TEMPERATURE
0552 85493C     296            mov x, Result
0555 854A3D     297            mov x+1, Result+1
0558 753E00     298            mov x+2, #0
055B 753F00     299            mov x+3, #0
055E 75402D     300            mov y+0, #low (45 % 0x10000) 
0561 754100     300            mov y+1, #high(45 % 0x10000) 
0564 754200     300            mov y+2, #low (45 / 0x10000) 
0567 754300     300            mov y+3, #high(45 / 0x10000) 
056A 120256     301            lcall mul32
056D 754064     302            mov y+0, #low (100 % 0x10000) 
0570 754100     302            mov y+1, #high(100 % 0x10000) 
0573 754200     302            mov y+2, #low (100 / 0x10000) 
0576 754300     302            mov y+3, #high(100 / 0x10000) 
0579 1202E3     303            lcall div32
057C 75401A     304            mov y+0, #low (26 % 0x10000) 
057F 754100     304            mov y+1, #high(26 % 0x10000) 
0582 754200     304            mov y+2, #low (26 / 0x10000) 
0585 754300     304            mov y+3, #high(26 / 0x10000) 
0588 1201A1     305            lcall add32
058B            306            ;load_y(7016)
058B            307            ;lcall sub32
058B E53C       308            mov a, x
058D D4         309            da a
058E 1200DC     310            lcall hex2bcd
0591            311            
0591            312            ;LCD DISPLAY
0591 C0E0       313            push acc
0593 7403       313            mov a, #3
0595 14         313            dec a
0596 1200C1     313            lcall ?Set_Cursor_1 ; Select column and row
0599 D0E0       313            pop acc
059B C000       314            push ar0
059D A845       314            mov r0, bcd+1
059F 1200C6     314            lcall ?Display_BCD
05A2 D000       314            pop ar0                                         
05A4 C0E0       315            push acc
05A6 7405       315            mov a, #5
05A8 14         315            dec a
05A9 1200C1     315            lcall ?Set_Cursor_1 ; Select column and row
05AC D0E0       315            pop acc
05AE C000       316            push ar0
05B0 A844       316            mov r0, bcd
05B2 1200C6     316            lcall ?Display_BCD
05B5 D000       316            pop ar0
05B7            317   
05B7            318            
05B7            319            ;PUTTY DISPLAY
05B7 E545       320            mov a, bcd+1
05B9 C4         321            swap a
05BA 540F       322            anl a, #0fh
05BC 4430       323            orl a, #30h
05BE 12053F     324            lcall putchar
05C1 E545       325            mov a, bcd+1
05C3 540F       326            anl a, #0fh
05C5 4430       327            orl a, #30h
05C7 12053F     328            lcall putchar
05CA E544       329            mov a, bcd+0
05CC C4         330            swap a
05CD 540F       331            anl a, #0fh
05CF 4430       332            orl a, #30h
05D1 12053F     333            lcall putchar
05D4 E544       334            mov a, bcd+0
05D6 540F       335            anl a, #0fh
05D8 4430       336            orl a, #30h
05DA 12053F     337            lcall putchar
05DD 740D       338            mov a, #'\r'
05DF 12053F     339            lcall putchar
05E2 740A       340            mov a, #'\n'
05E4 12053F     341            lcall putchar
05E7 22         342   ret
05E8            343   
05E8            344   
05E8            345   beep:
05E8 D2C4       346            setb SOUND_OUT
05EA 12051E     347       lcall delay
05ED 12051E     348       lcall delay
05F0 C2C4       349       clr SOUND_OUT
05F2 12051E     350       lcall delay
05F5 22         351       ret
05F6            352     
05F6            353   
05F6            354   main:
05F6 75817F     355       mov SP, #0x7F
05F9 12047D     356       lcall Timer0_Init
05FC 1204A3     357       lcall Timer2_Init
05FF 120088     358       lcall LCD_4BIT
0602 75E600     359       mov P0M0, #0
0605 75E700     360       mov P0M1, #0
0608 D2AF       361       setb EA 
060A D200       362       setb half_seconds_flag
060C 753430     363       mov soaktemp, #0x30
060F 753600     364       mov soaktime, #0
0612 753800     365       mov reflowtemp, #0
0615 753A00     366       mov reflowtime, #0
0618 754D00     367       mov hun, #0
061B 754E00     368       mov hun1, #0
061E 754F00     369       mov hun2, #0
0621 755000     370       mov hun3, #0
0624 755400     371       mov pwm+0, #low(0)           ;initialize pwm to 0% 
0627 755500     372            mov pwm+1, #high(0)
062A 755601     373            mov state, #0x1
062D 755701     374       mov statealarm, #1
0630 C201       375       clr no_alarm
0632 C2C4       376       clr SOUND_OUT
0634            377       
0634            378       
0634            379       ;SET SOAK TEMPERATURE
0634            380            redo:
0634 C0E0       381            push acc
0636 7401       381            mov a, #1
0638 14         381            dec a
0639 1200C1     381            lcall ?Set_Cursor_1 ; Select column and row
063C D0E0       381            pop acc
063E C083       382            push dph
0640 C082       382            push dpl
0642 C0E0       382            push acc
0644 9003E4     382            mov dptr, #clear
0647 1200B4     382            lcall ?Send_Constant_String
064A D0E0       382            pop acc
064C D082       382            pop dpl
064E D083       382            pop dph
0650 C0E0       383            push acc
0652 7401       383            mov a, #1
0654 14         383            dec a
0655 1200BF     383            lcall ?Set_Cursor_2 ; Select column and row
0658 D0E0       383            pop acc
065A C083       384            push dph
065C C082       384            push dpl
065E C0E0       384            push acc
0660 9003E4     384            mov dptr, #clear
0663 1200B4     384            lcall ?Send_Constant_String
0666 D0E0       384            pop acc
0668 D082       384            pop dpl
066A D083       384            pop dph
066C C0E0       385            push acc
066E 7401       385            mov a, #1
0670 14         385            dec a
0671 1200C1     385            lcall ?Set_Cursor_1 ; Select column and row
0674 D0E0       385            pop acc
0676 C083       386            push dph
0678 C082       386            push dpl
067A C0E0       386            push acc
067C 90036D     386            mov dptr, #stemp
067F 1200B4     386            lcall ?Send_Constant_String
0682 D0E0       386            pop acc
0684 D082       386            pop dpl
0686 D083       386            pop dph
0688            387       setsoaktemp:
0688 208111     388      jb ADD_ONE, sendback23d
068B C002       388            push AR2
068D 7A32       388            mov R2, #50
068F 120039     388            lcall ?Wait_Milli_Seconds
0692 D002       388            pop AR2
0694 208105     388      jb ADD_ONE, sendback23d
0697 3081FD     388      jnb ADD_ONE, $
069A 8003       388      sjmp done123d
069C            388      
069C            388      sendback23d:
069C 0206B2     388      ljmp scroll
069F            388      done123d:
069F E534       389            mov a, soaktemp
06A1 B49507     389            cjne a, #0x95, done25d
06A4 E54D       389            mov a, hun
06A6 2401       389            add a, #0x1
06A8 D4         389            da a
06A9 F54D       389            mov hun, a
06AB            389            done25d:
06AB E534       389            mov a, soaktemp
06AD 2405       389            add a, #5
06AF D4         389            da a
06B0 F534       389            mov soaktemp, a
06B2            390       scroll:
06B2 C0E0       391            push acc
06B4 740E       391            mov a, #14
06B6 14         391            dec a
06B7 1200C1     391            lcall ?Set_Cursor_1 ; Select column and row
06BA D0E0       391            pop acc
06BC C000       391            push ar0
06BE A834       391            mov r0, soaktemp
06C0 1200C6     391            lcall ?Display_BCD
06C3 D000       391            pop ar0
06C5 C0E0       391            push acc
06C7 740D       391            mov a, #13
06C9 14         391            dec a
06CA 1200C1     391            lcall ?Set_Cursor_1 ; Select column and row
06CD D0E0       391            pop acc
06CF E54D       391       mov a, hun
06D1 4430       391       orl a, #0x30
06D3 12007E     391            lcall ?WriteData
06D6 20A411     392      jb NEXT, sendback30d
06D9 C002       392            push AR2
06DB 7A32       392            mov R2, #50
06DD 120039     392            lcall ?Wait_Milli_Seconds
06E0 D002       392            pop AR2
06E2 20A405     392      jb NEXT, sendback30d
06E5 30A4FD     392      jnb NEXT, $
06E8 8003       392      sjmp done130d
06EA            392      
06EA            392      sendback30d:
06EA 020688     392      ljmp setsoaktemp
06ED            392      done130d:
06ED            393       
06ED            394       
06ED            395       ;SET SOAK TIME
06ED C0E0       396            push acc
06EF 7401       396            mov a, #1
06F1 14         396            dec a
06F2 1200C1     396            lcall ?Set_Cursor_1 ; Select column and row
06F5 D0E0       396            pop acc
06F7 C083       397            push dph
06F9 C082       397            push dpl
06FB C0E0       397            push acc
06FD 90037E     397            mov dptr, #stime
0700 1200B4     397            lcall ?Send_Constant_String
0703 D0E0       397            pop acc
0705 D082       397            pop dpl
0707 D083       397            pop dph
0709            398       setsoaktime:
0709 208111     399      jb ADD_ONE, sendback34d
070C C002       399            push AR2
070E 7A32       399            mov R2, #50
0710 120039     399            lcall ?Wait_Milli_Seconds
0713 D002       399            pop AR2
0715 208105     399      jb ADD_ONE, sendback34d
0718 3081FD     399      jnb ADD_ONE, $
071B 8003       399      sjmp done134d
071D            399      
071D            399      sendback34d:
071D 020733     399      ljmp scroll1
0720            399      done134d:
0720 E536       400            mov a, soaktime
0722 B49507     400            cjne a, #0x95, done36d
0725 E54E       400            mov a, hun1
0727 2401       400            add a, #0x1
0729 D4         400            da a
072A F54E       400            mov hun1, a
072C            400            done36d:
072C E536       400            mov a, soaktime
072E 2405       400            add a, #5
0730 D4         400            da a
0731 F536       400            mov soaktime, a
0733            401       scroll1:
0733 C0E0       402            push acc
0735 740E       402            mov a, #14
0737 14         402            dec a
0738 1200C1     402            lcall ?Set_Cursor_1 ; Select column and row
073B D0E0       402            pop acc
073D C000       402            push ar0
073F A836       402            mov r0, soaktime
0741 1200C6     402            lcall ?Display_BCD
0744 D000       402            pop ar0
0746 C0E0       402            push acc
0748 740D       402            mov a, #13
074A 14         402            dec a
074B 1200C1     402            lcall ?Set_Cursor_1 ; Select column and row
074E D0E0       402            pop acc
0750 E54E       402       mov a, hun1
0752 4430       402       orl a, #0x30
0754 12007E     402            lcall ?WriteData
0757 20A411     403      jb NEXT, sendback41d
075A C002       403            push AR2
075C 7A32       403            mov R2, #50
075E 120039     403            lcall ?Wait_Milli_Seconds
0761 D002       403            pop AR2
0763 20A405     403      jb NEXT, sendback41d
0766 30A4FD     403      jnb NEXT, $
0769 8003       403      sjmp done141d
076B            403      
076B            403      sendback41d:
076B 020709     403      ljmp setsoaktime
076E            403      done141d:
076E            404       
076E            405       
076E            406       ;SET REFLOW TEMPERATURE
076E C0E0       407            push acc
0770 7401       407            mov a, #1
0772 14         407            dec a
0773 1200C1     407            lcall ?Set_Cursor_1 ; Select column and row
0776 D0E0       407            pop acc
0778 C083       408            push dph
077A C082       408            push dpl
077C C0E0       408            push acc
077E 90038F     408            mov dptr, #rtemp
0781 1200B4     408            lcall ?Send_Constant_String
0784 D0E0       408            pop acc
0786 D082       408            pop dpl
0788 D083       408            pop dph
078A            409       setreflowtemp:
078A 208111     410      jb ADD_ONE, sendback45d
078D C002       410            push AR2
078F 7A32       410            mov R2, #50
0791 120039     410            lcall ?Wait_Milli_Seconds
0794 D002       410            pop AR2
0796 208105     410      jb ADD_ONE, sendback45d
0799 3081FD     410      jnb ADD_ONE, $
079C 8003       410      sjmp done145d
079E            410      
079E            410      sendback45d:
079E 0207B4     410      ljmp scroll2
07A1            410      done145d:
07A1 E538       411            mov a, reflowtemp
07A3 B49507     411            cjne a, #0x95, done47d
07A6 E54F       411            mov a, hun2
07A8 2401       411            add a, #0x1
07AA D4         411            da a
07AB F54F       411            mov hun2, a
07AD            411            done47d:
07AD E538       411            mov a, reflowtemp
07AF 2405       411            add a, #5
07B1 D4         411            da a
07B2 F538       411            mov reflowtemp, a
07B4            412       scroll2:
07B4 C0E0       413            push acc
07B6 740E       413            mov a, #14
07B8 14         413            dec a
07B9 1200C1     413            lcall ?Set_Cursor_1 ; Select column and row
07BC D0E0       413            pop acc
07BE C000       413            push ar0
07C0 A838       413            mov r0, reflowtemp
07C2 1200C6     413            lcall ?Display_BCD
07C5 D000       413            pop ar0
07C7 C0E0       413            push acc
07C9 740D       413            mov a, #13
07CB 14         413            dec a
07CC 1200C1     413            lcall ?Set_Cursor_1 ; Select column and row
07CF D0E0       413            pop acc
07D1 E54F       413       mov a, hun2
07D3 4430       413       orl a, #0x30
07D5 12007E     413            lcall ?WriteData
07D8 20A411     414      jb NEXT, sendback52d
07DB C002       414            push AR2
07DD 7A32       414            mov R2, #50
07DF 120039     414            lcall ?Wait_Milli_Seconds
07E2 D002       414            pop AR2
07E4 20A405     414      jb NEXT, sendback52d
07E7 30A4FD     414      jnb NEXT, $
07EA 8003       414      sjmp done152d
07EC            414      
07EC            414      sendback52d:
07EC 02078A     414      ljmp setreflowtemp
07EF            414      done152d:
07EF            415       
07EF            416       
07EF            417       ;SET REFLOW TIME
07EF C0E0       418            push acc
07F1 7401       418            mov a, #1
07F3 14         418            dec a
07F4 1200C1     418            lcall ?Set_Cursor_1 ; Select column and row
07F7 D0E0       418            pop acc
07F9 C083       419            push dph
07FB C082       419            push dpl
07FD C0E0       419            push acc
07FF 9003A0     419            mov dptr, #rtime
0802 1200B4     419            lcall ?Send_Constant_String
0805 D0E0       419            pop acc
0807 D082       419            pop dpl
0809 D083       419            pop dph
080B            420       setreflowtime:
080B 208111     421      jb ADD_ONE, sendback56d
080E C002       421            push AR2
0810 7A32       421            mov R2, #50
0812 120039     421            lcall ?Wait_Milli_Seconds
0815 D002       421            pop AR2
0817 208105     421      jb ADD_ONE, sendback56d
081A 3081FD     421      jnb ADD_ONE, $
081D 8003       421      sjmp done156d
081F            421      
081F            421      sendback56d:
081F 020835     421      ljmp scroll3
0822            421      done156d:
0822 E53A       422            mov a, reflowtime
0824 B49907     422            cjne a, #0x99, done58d
0827 E550       422            mov a, hun3
0829 2401       422            add a, #0x1
082B D4         422            da a
082C F550       422            mov hun3, a
082E            422            done58d:
082E E53A       422            mov a, reflowtime
0830 2401       422            add a, #1
0832 D4         422            da a
0833 F53A       422            mov reflowtime, a
0835            423       scroll3:
0835 C0E0       424            push acc
0837 740E       424            mov a, #14
0839 14         424            dec a
083A 1200C1     424            lcall ?Set_Cursor_1 ; Select column and row
083D D0E0       424            pop acc
083F C000       424            push ar0
0841 A83A       424            mov r0, reflowtime
0843 1200C6     424            lcall ?Display_BCD
0846 D000       424            pop ar0
0848 C0E0       424            push acc
084A 740D       424            mov a, #13
084C 14         424            dec a
084D 1200C1     424            lcall ?Set_Cursor_1 ; Select column and row
0850 D0E0       424            pop acc
0852 E550       424       mov a, hun3
0854 4430       424       orl a, #0x30
0856 12007E     424            lcall ?WriteData
0859 20A411     425      jb NEXT, sendback63d
085C C002       425            push AR2
085E 7A32       425            mov R2, #50
0860 120039     425            lcall ?Wait_Milli_Seconds
0863 D002       425            pop AR2
0865 20A405     425      jb NEXT, sendback63d
0868 30A4FD     425      jnb NEXT, $
086B 8003       425      sjmp done163d
086D            425      
086D            425      sendback63d:
086D 02080B     425      ljmp setreflowtime
0870            425      done163d:
0870            426       
0870            427            
0870            428            ;SAVING CHANGES
0870            429       final:
0870 C0E0       430            push acc
0872 7401       430            mov a, #1
0874 14         430            dec a
0875 1200C1     430            lcall ?Set_Cursor_1 ; Select column and row
0878 D0E0       430            pop acc
087A C083       431            push dph
087C C082       431            push dpl
087E C0E0       431            push acc
0880 9003D3     431            mov dptr, #save
0883 1200B4     431            lcall ?Send_Constant_String
0886 D0E0       431            pop acc
0888 D082       431            pop dpl
088A D083       431            pop dph
088C            431   
088C 208111     432      jb ADD_ONE, sendback67d
088F C002       432            push AR2
0891 7A32       432            mov R2, #50
0893 120039     432            lcall ?Wait_Milli_Seconds
0896 D002       432            pop AR2
0898 208105     432      jb ADD_ONE, sendback67d
089B 3081FD     432      jnb ADD_ONE, $
089E 8003       432      sjmp done167d
08A0            432      
08A0            432      sendback67d:
08A0 0208A8     432      ljmp change
08A3            432      done167d:
08A3 E552       433       mov a, switch
08A5 F4         434       cpl a
08A6 F552       435       mov switch, a
08A8            436       change:
08A8 B40052     437       cjne a, #0, yes
08AB C0E0       438            push acc
08AD 7401       438            mov a, #1
08AF 14         438            dec a
08B0 1200BF     438            lcall ?Set_Cursor_2 ; Select column and row
08B3 D0E0       438            pop acc
08B5 C083       439            push dph
08B7 C082       439            push dpl
08B9 C0E0       439            push acc
08BB 9003C2     439            mov dptr, #selectno
08BE 1200B4     439            lcall ?Send_Constant_String
08C1 D0E0       439            pop acc
08C3 D082       439            pop dpl
08C5 D083       439            pop dph
08C7 20A411     440      jb NEXT, sendback71d
08CA C002       440            push AR2
08CC 7A32       440            mov R2, #50
08CE 120039     440            lcall ?Wait_Milli_Seconds
08D1 D002       440            pop AR2
08D3 20A405     440      jb NEXT, sendback71d
08D6 30A4FD     440      jnb NEXT, $
08D9 8003       440      sjmp done171d
08DB            440      
08DB            440      sendback71d:
08DB 020870     440      ljmp final
08DE            440      done171d:
08DE C0E0       441            push acc
08E0 7401       441            mov a, #1
08E2 14         441            dec a
08E3 1200BF     441            lcall ?Set_Cursor_2 ; Select column and row
08E6 D0E0       441            pop acc
08E8 C083       442            push dph
08EA C082       442            push dpl
08EC C0E0       442            push acc
08EE 9003E4     442            mov dptr, #clear
08F1 1200B4     442            lcall ?Send_Constant_String
08F4 D0E0       442            pop acc
08F6 D082       442            pop dpl
08F8 D083       442            pop dph
08FA 020634     443       ljmp redo
08FD            444       yes:
08FD C0E0       445            push acc
08FF 7401       445            mov a, #1
0901 14         445            dec a
0902 1200BF     445            lcall ?Set_Cursor_2 ; Select column and row
0905 D0E0       445            pop acc
0907 C083       446            push dph
0909 C082       446            push dpl
090B C0E0       446            push acc
090D 9003B1     446            mov dptr, #selectyes
0910 1200B4     446            lcall ?Send_Constant_String
0913 D0E0       446            pop acc
0915 D082       446            pop dpl
0917 D083       446            pop dph
0919            446   
0919 20A411     447      jb NEXT, sendback77d
091C C002       447            push AR2
091E 7A32       447            mov R2, #50
0920 120039     447            lcall ?Wait_Milli_Seconds
0923 D002       447            pop AR2
0925 20A405     447      jb NEXT, sendback77d
0928 30A4FD     447      jnb NEXT, $
092B 8003       447      sjmp done177d
092D            447      
092D            447      sendback77d:
092D 020870     447      ljmp final
0930            447      done177d:
0930            448       
0930            449       ;MOVING ON TO THE BAKING PROCESS
0930 C0E0       450            push acc
0932 7401       450            mov a, #1
0934 14         450            dec a
0935 1200C1     450            lcall ?Set_Cursor_1 ; Select column and row
0938 D0E0       450            pop acc
093A C083       451            push dph
093C C082       451            push dpl
093E C0E0       451            push acc
0940 9003F5     451            mov dptr, #otemp
0943 1200B4     451            lcall ?Send_Constant_String
0946 D0E0       451            pop acc
0948 D082       451            pop dpl
094A D083       451            pop dph
094C C0E0       452            push acc
094E 7401       452            mov a, #1
0950 14         452            dec a
0951 1200BF     452            lcall ?Set_Cursor_2 ; Select column and row
0954 D0E0       452            pop acc
0956 C083       453            push dph
0958 C082       453            push dpl
095A C0E0       453            push acc
095C 9003E4     453            mov dptr, #clear
095F 1200B4     453            lcall ?Send_Constant_String
0962 D0E0       453            pop acc
0964 D082       453            pop dpl
0966 D083       453            pop dph
0968 755100     454       mov hunsec, #0
096B 753300     455       mov second, #0
096E            456       
096E            457       
096E            458       ;LOOP UPDATING REAL TIME TEMPERATURE
096E            459       forever1:
096E 12034C     460            lcall forever
0971            461            
0971            462   
0971            463            ;ONE BEEP EACH NEW STATE
0971 E557       464            mov a, statealarm
0973 B55608     465       cjne a, state, nope
0976 2401       466       add a, #1
0978 D4         467       da a
0979 F557       468       mov statealarm, a
097B 1205E8     469       lcall beep
097E            470       nope:
097E E556       471            mov a, state
0980 B4017F     472            cjne a, #1, soak
0983            473            
0983            474            ;USING TIMER 2 FOR BAKE CLOCK
0983 C0E0       475            push acc
0985 740B       475            mov a, #11
0987 14         475            dec a
0988 1200C1     475            lcall ?Set_Cursor_1 ; Select column and row
098B D0E0       475            pop acc
098D C000       475            push ar0
098F A833       475            mov r0, second
0991 1200C6     475            lcall ?Display_BCD
0994 D000       475            pop ar0
0996 C0E0       475            push acc
0998 740A       475            mov a, #10
099A 14         475            dec a
099B 1200C1     475            lcall ?Set_Cursor_1 ; Select column and row
099E D0E0       475            pop acc
09A0 E551       475       mov a, hunsec
09A2 4430       475       orl a, #0x30
09A4 12007E     475            lcall ?WriteData
09A7 C0E0       476            push acc
09A9 7401       476            mov a, #1
09AB 14         476            dec a
09AC 1200BF     476            lcall ?Set_Cursor_2 ; Select column and row
09AF D0E0       476            pop acc
09B1 C083       477            push dph
09B3 C082       477            push dpl
09B5 C0E0       477            push acc
09B7 900406     477            mov dptr, #state1dis
09BA 1200B4     477            lcall ?Send_Constant_String
09BD D0E0       477            pop acc
09BF D082       477            pop dpl
09C1 D083       477            pop dph
09C3            478   
09C3            479            ;MAX POWER TO OVEN
09C3 7554E8     480            mov pwm+0, #low(1000) 
09C6 755503     481            mov pwm+1, #high(1000) 
09C9            482   
09C9 E533       483            mov a, second                   ;safety case
09CB B4601C     484            cjne a, #0x60, not60
09CE E54D       485            mov a, hun
09D0 B40017     486            cjne a, #0, not60       
09D3 7450       487            mov a, #0x50
09D5 9544       488            subb a, bcd
09D7 5002       489            jnc escape                      ;basically checking for overflow
09D9 800F       490            sjmp not60
09DB            491   
09DB            492            ;DOESNT REACH 50C WITHIN 60 SEC
09DB            493            escape:
09DB 755701     494            mov statealarm, #1
09DE 755601     495            mov state, #1
09E1 755400     496            mov pwm+0, #low(0) 
09E4 755500     497            mov pwm+1, #high(0) 
09E7 020634     498            ljmp redo
09EA            499            
09EA            500            not60:
09EA E54D       501            mov a, hun
09EC B54507     502            cjne a, bcd+1, cont
09EF E534       503            mov a, soaktemp                 ;passes safety check. or 60 seconds have not passes. now checking for ramp to soak temp set earlier
09F1 B54402     504            cjne a, bcd, cont
09F4 8003       505            sjmp gogo
09F6            506            cont:
09F6 02096E     507            ljmp forever1
09F9            508            gogo:
09F9 755602     509            mov state, #2
09FC 753300     510            mov second, #0
09FF 755100     511            mov hunsec, #0
0A02            512            
0A02            513            soak:
0A02 E556       514            mov a, state
0A04 B40259     515            cjne a, #2, ramptoreflow
0A07            516            ;USING TIMER 2 FOR BAKE CLOCK
0A07 C0E0       517            push acc
0A09 740B       517            mov a, #11
0A0B 14         517            dec a
0A0C 1200C1     517            lcall ?Set_Cursor_1 ; Select column and row
0A0F D0E0       517            pop acc
0A11 C000       517            push ar0
0A13 A833       517            mov r0, second
0A15 1200C6     517            lcall ?Display_BCD
0A18 D000       517            pop ar0
0A1A C0E0       517            push acc
0A1C 740A       517            mov a, #10
0A1E 14         517            dec a
0A1F 1200C1     517            lcall ?Set_Cursor_1 ; Select column and row
0A22 D0E0       517            pop acc
0A24 E551       517       mov a, hunsec
0A26 4430       517       orl a, #0x30
0A28 12007E     517            lcall ?WriteData
0A2B C0E0       518            push acc
0A2D 7401       518            mov a, #1
0A2F 14         518            dec a
0A30 1200BF     518            lcall ?Set_Cursor_2 ; Select column and row
0A33 D0E0       518            pop acc
0A35 C083       519            push dph
0A37 C082       519            push dpl
0A39 C0E0       519            push acc
0A3B 900417     519            mov dptr, #state2dis
0A3E 1200B4     519            lcall ?Send_Constant_String
0A41 D0E0       519            pop acc
0A43 D082       519            pop dpl
0A45 D083       519            pop dph
0A47            520            ;SET OVEN TO MEDIUM POWER
0A47 755400     521            mov pwm+0, #low(0) 
0A4A 755500     522            mov pwm+1, #high(0)
0A4D            523            
0A4D            524            ;CHECKING IF SOAK TIME MET
0A4D E551       525            mov a, hunsec
0A4F B54EA4     526            cjne a, hun1, cont
0A52 E533       527            mov a, second
0A54 B5369F     528            cjne a, soaktime, cont
0A57            529            
0A57            530            ;CONTINUE TO NEXT STATE RESET TIME
0A57 755603     531            mov state, #3
0A5A 753300     532            mov second, #0
0A5D 755100     533            mov hunsec, #0
0A60            534            
0A60            535            
0A60            536            ramptoreflow:
0A60 E556       537            mov a, state
0A62 B4035E     538            cjne a, #3, reflow
0A65            539            ;DISPLAYING TIME VARIABLE ONCE AGAIN
0A65 C0E0       540            push acc
0A67 740B       540            mov a, #11
0A69 14         540            dec a
0A6A 1200C1     540            lcall ?Set_Cursor_1 ; Select column and row
0A6D D0E0       540            pop acc
0A6F C000       540            push ar0
0A71 A833       540            mov r0, second
0A73 1200C6     540            lcall ?Display_BCD
0A76 D000       540            pop ar0
0A78 C0E0       540            push acc
0A7A 740A       540            mov a, #10
0A7C 14         540            dec a
0A7D 1200C1     540            lcall ?Set_Cursor_1 ; Select column and row
0A80 D0E0       540            pop acc
0A82 E551       540       mov a, hunsec
0A84 4430       540       orl a, #0x30
0A86 12007E     540            lcall ?WriteData
0A89 C0E0       541            push acc
0A8B 7401       541            mov a, #1
0A8D 14         541            dec a
0A8E 1200BF     541            lcall ?Set_Cursor_2 ; Select column and row
0A91 D0E0       541            pop acc
0A93 C083       542            push dph
0A95 C082       542            push dpl
0A97 C0E0       542            push acc
0A99 900428     542            mov dptr, #state3dis
0A9C 1200B4     542            lcall ?Send_Constant_String
0A9F D0E0       542            pop acc
0AA1 D082       542            pop dpl
0AA3 D083       542            pop dph
0AA5            543            ;SETTING OVEN TO MAX POWER
0AA5 7554E8     544            mov pwm+0, #low(1000) 
0AA8 755503     545            mov pwm+1, #high(1000) 
0AAB            546            ;CHECKING TO SEE IF RAMP TEMPERATURE MET
0AAB E54F       547            mov a, hun2
0AAD B54507     548            cjne a, bcd+1, cont1
0AB0 E544       549            mov a, bcd
0AB2 B53802     550            cjne a, reflowtemp, cont1
0AB5 8003       551            sjmp gogo1
0AB7            552            cont1:
0AB7 02096E     553            ljmp forever1
0ABA            554            gogo1:
0ABA            555   
0ABA            556            ;MOVING ON TO NEXT STATE
0ABA 755604     557            mov state, #4
0ABD 753300     558            mov second, #0
0AC0 755100     559            mov hunsec, #0
0AC3            560            
0AC3            561            
0AC3            562            reflow:
0AC3 E556       563            mov a, state
0AC5 B40459     564            cjne a, #4, coolmike
0AC8            565            ;DISPLAY TIME VARIABLE
0AC8 C0E0       566            push acc
0ACA 740B       566            mov a, #11
0ACC 14         566            dec a
0ACD 1200C1     566            lcall ?Set_Cursor_1 ; Select column and row
0AD0 D0E0       566            pop acc
0AD2 C000       566            push ar0
0AD4 A833       566            mov r0, second
0AD6 1200C6     566            lcall ?Display_BCD
0AD9 D000       566            pop ar0
0ADB C0E0       566            push acc
0ADD 740A       566            mov a, #10
0ADF 14         566            dec a
0AE0 1200C1     566            lcall ?Set_Cursor_1 ; Select column and row
0AE3 D0E0       566            pop acc
0AE5 E551       566       mov a, hunsec
0AE7 4430       566       orl a, #0x30
0AE9 12007E     566            lcall ?WriteData
0AEC C0E0       567            push acc
0AEE 7401       567            mov a, #1
0AF0 14         567            dec a
0AF1 1200BF     567            lcall ?Set_Cursor_2 ; Select column and row
0AF4 D0E0       567            pop acc
0AF6 C083       568            push dph
0AF8 C082       568            push dpl
0AFA C0E0       568            push acc
0AFC 900439     568            mov dptr, #state4dis
0AFF 1200B4     568            lcall ?Send_Constant_String
0B02 D0E0       568            pop acc
0B04 D082       568            pop dpl
0B06 D083       568            pop dph
0B08            569            ;SET OVEN TO ABOVE MEDIUM POWER
0B08 755400     570            mov pwm+0, #low(0)
0B0B 755500     571            mov pwm+1, #high(0) 
0B0E            572            ;CHECK IF REFLOW TIME MET
0B0E E550       573            mov a, hun3
0B10 B551A4     574            cjne a, hunsec, cont1
0B13 E533       575            mov a, second
0B15 B53A9F     576            cjne a, reflowtime, cont1
0B18            577            
0B18            578            ;MOVING ON TO COOL STATE
0B18 755605     579            mov state, #5
0B1B 753300     580            mov second, #0
0B1E 755100     581            mov hunsec, #0
0B21            582            
0B21            583            coolmike:
0B21 C0E0       584            push acc
0B23 740B       584            mov a, #11
0B25 14         584            dec a
0B26 1200C1     584            lcall ?Set_Cursor_1 ; Select column and row
0B29 D0E0       584            pop acc
0B2B C000       584            push ar0
0B2D A833       584            mov r0, second
0B2F 1200C6     584            lcall ?Display_BCD
0B32 D000       584            pop ar0
0B34 C0E0       584            push acc
0B36 740A       584            mov a, #10
0B38 14         584            dec a
0B39 1200C1     584            lcall ?Set_Cursor_1 ; Select column and row
0B3C D0E0       584            pop acc
0B3E E551       584       mov a, hunsec
0B40 4430       584       orl a, #0x30
0B42 12007E     584            lcall ?WriteData
0B45 C0E0       585            push acc
0B47 7401       585            mov a, #1
0B49 14         585            dec a
0B4A 1200BF     585            lcall ?Set_Cursor_2 ; Select column and row
0B4D D0E0       585            pop acc
0B4F C083       586            push dph
0B51 C082       586            push dpl
0B53 C0E0       586            push acc
0B55 90044A     586            mov dptr, #state5dis
0B58 1200B4     586            lcall ?Send_Constant_String
0B5B D0E0       586            pop acc
0B5D D082       586            pop dpl
0B5F D083       586            pop dph
0B61            587            ;TURN OFF OVEN
0B61 755400     588            mov pwm+0, #low(0) 
0B64 755500     589            mov pwm+1, #high(0) 
0B67            590            
0B67            591            
0B67            592            ;CHECKING IF COOL ENOUGH TO HANDEL
0B67 E54F       593            mov a, hun2
0B69 B54551     594            cjne a, bcd+1, cont2
0B6C E544       595            mov a, bcd
0B6E B4304C     596            cjne a, #0x30, cont2
0B71            597            
0B71 C0E0       598            push acc
0B73 7401       598            mov a, #1
0B75 14         598            dec a
0B76 1200BF     598            lcall ?Set_Cursor_2 ; Select column and row
0B79 D0E0       598            pop acc
0B7B C083       599            push dph
0B7D C082       599            push dpl
0B7F C0E0       599            push acc
0B81 90046C     599            mov dptr, #coolenough1
0B84 1200B4     599            lcall ?Send_Constant_String
0B87 D0E0       599            pop acc
0B89 D082       599            pop dpl
0B8B D083       599            pop dph
0B8D C0E0       600            push acc
0B8F 7401       600            mov a, #1
0B91 14         600            dec a
0B92 1200C1     600            lcall ?Set_Cursor_1 ; Select column and row
0B95 D0E0       600            pop acc
0B97            600   
0B97 C083       601            push dph
0B99 C082       601            push dpl
0B9B C0E0       601            push acc
0B9D 90045B     601            mov dptr, #coolenough
0BA0 1200B4     601            lcall ?Send_Constant_String
0BA3 D0E0       601            pop acc
0BA5 D082       601            pop dpl
0BA7 D083       601            pop dph
0BA9 1205E8     602            lcall beep
0BAC 1205E8     603            lcall beep
0BAF 1205E8     604            lcall beep
0BB2 1205E8     605            lcall beep
0BB5 1205E8     606            lcall beep
0BB8 1205E8     607            lcall beep
0BBB            608   
0BBB            609            
0BBB            610            ending:
0BBB 80FE       611            sjmp ending
0BBD            612            ;add beep sounds for letting the person know that its cool enough, like 30 celcisu
0BBD            613            cont2:
0BBD 02096E     614       ljmp forever1 
0BC0            615       
0BC0            616       
0BC0            617     
0BC0            618            en
